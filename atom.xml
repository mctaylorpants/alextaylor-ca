<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://alextaylor.ca/">
  <id>https://alextaylor.ca/</id>
  <title>alextaylor.ca</title>
  <updated>2025-06-06T00:00:00Z</updated>
  <link rel="alternate" href="https://alextaylor.ca/" type="text/html"/>
  <link rel="self" href="https://alextaylor.ca/atom.xml" type="application/atom+xml"/>
  <author>
    <name>Alex Taylor</name>
    <uri>https://alextaylor.ca</uri>
  </author>
  <entry>
    <id>tag:alextaylor.ca,2025-06-06:/read/my-obsidian-workflow/</id>
    <title type="html">My Obsidian Workflow</title>
    <published>2025-06-06T00:00:00Z</published>
    <updated>2025-06-06T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/my-obsidian-workflow/" type="text/html"/>
    <content type="html">&lt;p&gt;I’ve been using &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt; for a few years to keep track of my work notes and tasks. I love how customizable it is, but that can also be a curse: you can end up spending ages configuring it, trying out new plugins, and lose track of why you’re using it in the first place!&lt;/p&gt;

&lt;p&gt;I’ve been actively iterating on my workflow for the past few months and have hit on something that’s been working pretty well for me, so I wanted to capture it.&lt;/p&gt;

&lt;h2 id="toodoo"&gt;
&lt;a href="#toodoo"&gt;&lt;/a&gt;TOODOO&lt;/h2&gt;
&lt;p&gt;At the root level of my vault, I have a note called “TOODOO”. (Why the extra Os? Why not!)&lt;/p&gt;

&lt;p&gt;There are two components to this view:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A “Project Overview” section&lt;/strong&gt;. I keep a list of the projects I have on the go and what’s next for each of them. I update this each week, and I find it helps me context-switch more quickly between projects when I have a lot on the go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tasks for today and for later&lt;/strong&gt;. I use the &lt;a href="https://publish.obsidian.md/tasks/Introduction#Task+management+for+the+Obsidian+knowledge+base"&gt;Tasks plugin&lt;/a&gt; to pull tasks from my daily notes and projects, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tasks

filter by function task.file.root === '1-- projects/' || \
  task.file.folder.includes('reflections/daily')

sort by priority, due, done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve fiddled around a lot with my grouping of tasks, and I’ll probably keep fiddling forever. I go back and forth between “daily + everything else”, “daily, weekly, later”, and other flavours. But I like how easy the Tasks plugin makes it to iterate on these queries.&lt;/p&gt;

&lt;h2 id="starting-each-day-with-a-fresh-page"&gt;
&lt;a href="#starting-each-day-with-a-fresh-page"&gt;&lt;/a&gt;Starting each day with a fresh “page”&lt;/h2&gt;
&lt;p&gt;The first thing I do in the morning is create my daily note. It’s my landing pad for what I’m doing, new tasks that come to mind, and other random notes throughout the day. I love it - it’s like turning to a new page in a notebook, free of cruft and full of possibility.&lt;/p&gt;

&lt;p&gt;I use the &lt;a href="https://help.obsidian.md/plugins/daily-notes"&gt;Daily Notes plugin&lt;/a&gt; which helps automate the creation of these notes from a template, and lets me pull up today’s note quickly from the command palette. I’ve iterated a lot on the template; recently I’ve settled on a list of open tasks with today’s due date, a list of tasks I’ve completed, and an open space below.&lt;/p&gt;

&lt;p&gt;Throughout the day, I’ll do a &lt;a href="https://bulletjournal.com/"&gt;Bullet Journal&lt;/a&gt;-esque workflow where I jot down stuff I’m doing. This helps me reflect on what I did that week, and can often help remind me of something I wanted to look into but didn’t have time when it first came up. It’s also a great source of inspiration for my &lt;a href="https://jvns.ca/blog/brag-documents/"&gt;brag document&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;In my Monday daily note, I’ve recently taken to writing down a quick breakdown of how I want the week to go. Something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;**Monday**
- Timeout bug: add logging, understand how our monitoring works

**Tuesday**
- Presentation and doc-writing for Project X

**Wednesday**
- Project Y: groom and prioritize tweak tickets

... etc...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve found it helpful to do this when I’m juggling a lot and need to prioritize, but I’m not ready to break out granular tasks. That’s the beauty of Obsidian: it’s just Markdown, it doesn’t lock you into a certain way of working.&lt;/p&gt;

&lt;h2 id="projects-big-and-small"&gt;
&lt;a href="#projects-big-and-small"&gt;&lt;/a&gt;Projects, big and small&lt;/h2&gt;
&lt;p&gt;Any larger initiative I’m working on gets its own note in the &lt;code&gt;projects&lt;/code&gt; folder. I typically keep a work log by date, and use the top of the note to link out to Github/Linear issues, relevant notes, slack channels, PRs, things in Google Docs - basically a collection of bookmarks.&lt;/p&gt;

&lt;p&gt;These notes aren’t just for capital-P Projects, though. Often, I’ll start taking notes on something in my daily note for that day, but it’s something I want to come back to the next day or the next week. When that happens, I’ll pull the notes up into a project note and then link to it from those daily notes.&lt;/p&gt;

&lt;p&gt;For example, I recently switched from vim to &lt;a href="https://www.cursor.com/"&gt;Cursor&lt;/a&gt;, and did a bunch of fiddling and customizing along the way. I found I would be working on something and suddenly miss a shortcut or function from vim, and wonder how to reproduce it, but not want to interrupt my focus to figure it out in the moment. These were getting lost across my various daily notes, so I made a &lt;code&gt;switch to cursor&lt;/code&gt; note where I started keeping a list of all these little issues. When I have time, I pick an issue from the list and fix it. When that list is empty, I’ll move that note to the &lt;code&gt;archives&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Having an &lt;code&gt;archives&lt;/code&gt; folder helps keep the &lt;code&gt;projects&lt;/code&gt; folder focused, so I can see at-a-glance what I’m working on and thinking about. If I haven’t worked on something in awhile, I just put it in &lt;code&gt;archives&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If a project gets even bigger than a note, I’ll make a folder for it. I’ll have an index note, usually prefixed with an underscore, that serves as a jumping-off point for whatever other notes I have in that folder.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;
&lt;a href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This workflow has really helped me stay on top of things:
- Starting with an empty daily note helps me start the day with a clear mind
- My TOODOO note serves as a high-level overview of everything that’s happening
- Project notes help organize larger and smaller initiatives so I can always pick up where I left off&lt;/p&gt;

&lt;p&gt;Obsidian is the first digital note-taking tool I’ve stuck with for longer than a few months. I’ve been using it for about 3 years. How I use it has evolved over time and will continue to evolve. It’s the flexibility that keeps me using it!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2025-03-24:/read/down-a-qmk-rabbit-hole/</id>
    <title type="html">Down a QMK rabbit hole</title>
    <published>2025-03-24T00:00:00Z</published>
    <updated>2025-03-24T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/down-a-qmk-rabbit-hole/" type="text/html"/>
    <content type="html">&lt;p&gt;Today I went down a fun rabbit hole of &lt;a href="https://qmk.fm/"&gt;QMK&lt;/a&gt;, the open-source firmware for mechanical keyboards (and other input devices). Like the start of any good rabbit hole, it all started with an extremely specific mission: fixing a minor nit with my new keyboard.&lt;/p&gt;

&lt;h2 id="tapping-too-fast"&gt;
&lt;a href="#tapping-too-fast"&gt;&lt;/a&gt;TAPPING too fast&lt;/h2&gt;
&lt;p&gt;I bought a &lt;a href="https://nuphy.com/collections/keyboards/products/air75-v2"&gt;NuPhy Air75 V2&lt;/a&gt; to try out a low-profile mechanical keyboard (it’s also nice that it’s wireless!).&lt;/p&gt;

&lt;p&gt;I started using &lt;a href="https://caniusevia.com/"&gt;VIA Configurator&lt;/a&gt; to remap keys. In particular, I wanted to try a home-row arrow setup which would let me use the vim-style mapping of h, j, k, and l as ←, ↑, ↓, and →. Since I still obviously want to use those keys for their intended alphabetical purpose, a modifier key was in order. Hey, Caps Lock is on the home row too, and I already remap it to Esc… why not modify it even further so that holding down Caps Lock triggers another layer?&lt;/p&gt;

&lt;p&gt;After a few trips to Google and Claude, I got the mapping code I wanted:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
LT(7, KC_ESC)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I used the &lt;code&gt;LT&lt;/code&gt; (“layer tap”) function to activate layer 7 when held, or Esc when tapped. From there, it was a simple matter to remap h, j, k and l to the arrow keys on layer 7. Perfect!&lt;/p&gt;

&lt;p&gt;… and then I tried using it.&lt;/p&gt;

&lt;p&gt;As it turns out, when I use arrow keys, I use them quickly. I’m often tapping up on the command-line or in the address bar to navigate history. Using the layer-tap, I found it wasn’t responding quickly enough and I’d end up sending “k” instead of “up” unless I held down Caps Lock for a (admittedly minuscule, but nevertheless infuriating) moment.&lt;/p&gt;

&lt;p&gt;More trips to the search gods led me to a tantalizing solution: a config setting named “&lt;a href="https://docs.qmk.fm/tap_hold#hold-on-other-key-press"&gt;Hold On Other Key Press&lt;/a&gt;”. From the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This mode makes tap and hold keys (like Layer Tap) work better for fast typists&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It me! Problem solved. Except, this option is &lt;em&gt;not&lt;/em&gt; configurable through VIA Configurator: it’s a lower-level configuration that needs to be set in the firmware itself.&lt;/p&gt;

&lt;p&gt;Enter my QMK rabbit hole.&lt;/p&gt;

&lt;h2 id="down-we-go"&gt;
&lt;a href="#down-we-go"&gt;&lt;/a&gt;Down we go…&lt;/h2&gt;

&lt;p&gt;As far as rabbit holes go, this ended up being a shallow one. QMK’s toolchain is really nice, and pleasant to work with. I ran through &lt;a href="https://docs.qmk.fm/newbs_getting_started"&gt;the tutorial&lt;/a&gt; and found my way to Reddit when I realized that NuPhy’s QMK support is not particularly straightforward.&lt;/p&gt;

&lt;p&gt;Here’s what I ended up doing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up QMK with NuPhy’s custom branch.&lt;/strong&gt; I found &lt;a href="https://www.reddit.com/r/NuPhy/comments/1dsve0c/compiling_qmk_for_nuphy_keyboards_spoiler_alert/"&gt;a helpful Reddit post&lt;/a&gt; on how to do this, since NuPhy’s keyboards haven’t made their way into the main QMK repo yet - they’ve got their own fork.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
qmk setup nuphy-src/qmk_firmware -b nuphy-keyboards
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mercifully, I had none of the compile issues mentioned in the thread!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take the compiler for a spin.&lt;/strong&gt; As suggested in the Reddit post, I tried compiling the keymap built for VIA Configurator:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
qmk compile -kb nuphy/air75_v2/ansi -km via
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This generated a &lt;code&gt;.bin&lt;/code&gt; file, which I could use to…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flash the firmware.&lt;/strong&gt; I used &lt;a href="https://qmk.fm/toolbox"&gt;QMK Toolbox&lt;/a&gt; to load the &lt;code&gt;.bin&lt;/code&gt; file and flash the firmware on to my keyboard (which involved holding down Esc when you plug it in to boot the keyboard into flashing mode).&lt;/p&gt;

&lt;h2 id="new-firmware-who-dis"&gt;
&lt;a href="#new-firmware-who-dis"&gt;&lt;/a&gt;New firmware, who dis?&lt;/h2&gt;

&lt;p&gt;After poking around with various configuration files, I got myself oriented:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;code&gt;keyboards/nuphy/air75_v2/ansi&lt;/code&gt; is the root folder of the firmware I’m working with; it’s full of C files that configure the keyboard itself, and what ends up compiling down to the &lt;code&gt;.bin&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Within this folder, &lt;code&gt;config.h&lt;/code&gt; contains a bunch of - unsurprisingly - config directives. Here I added one line: &lt;strong&gt;&lt;code&gt;#define HOLD_ON_OTHER_KEY_PRESS&lt;/code&gt;&lt;/strong&gt;, which is the whole reason I went on this journey in the first place!&lt;/li&gt;
  &lt;li&gt;There’s a &lt;code&gt;keymaps&lt;/code&gt; folder where you can store various mappings of the keys themselves. I suppose this is more “user-facing” so it’s kept separate from the lower-level config of the keyboard. I know you can define your own custom keymap, but I didn’t touch anything in here because I want to keep using VIA Configurator while I’m playing around layout.&lt;/li&gt;
  &lt;li&gt;Finally, I have a &lt;code&gt;json&lt;/code&gt; file I exported from VIA Configurator’s web UI after I set up my key mappings. This is &lt;em&gt;not&lt;/em&gt; the same format as QMK’s JSON format (&lt;a href="https://github.com/nuphy-src/qmk_firmware/blob/nuphy-keyboards/keyboards/nuphy/air75_v2/ansi/keymaps/via/NuPhy%20Air75%20V2%20via3.json"&gt;like this one provided by NuPhy for use in VIA&lt;/a&gt;), which was confusing to me at first. For VIA, I think the QMK JSON file is used to load in the keyboard definition, and the exportable JSON file is just used for saving the updated key mapping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually once I’m reasonably happy with the layout, I could conceivably compile it directly into the default keymap. But for now, this toolchain works nicely!&lt;/p&gt;

&lt;p&gt;And the best part: now my arrow-taps are lightning fast! ⚡️&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2024-03-07:/read/mysql-slow-query-log/</id>
    <title type="html">Playing with MySQL's slow query log</title>
    <published>2024-03-07T00:00:00Z</published>
    <updated>2024-03-07T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/mysql-slow-query-log/" type="text/html"/>
    <content type="html">&lt;p&gt;Like any developer, I love a good feedback loop. Not only is a quick feedback loop essential for flow, it’s also usually the best way to wrap your head around how something works.&lt;/p&gt;

&lt;p&gt;But feedback loops can be harder to come by when you’re dealing with optimizing poorly-performing database queries. A bad query in production is like a bug that needs to be reproduced - or at least understood - before you can fix it; but since the poor performance is almost always related to the data it’s operating on, you can’t usually run it locally and get the same results. (And I hope you can’t “just” run it in a console on production, either! 😱)&lt;/p&gt;

&lt;p&gt;So instead of feedback loops, we need to rely on telemetry, like &lt;code&gt;EXPLAIN&lt;/code&gt;s run on production or MySQL’s slow query log, which provides insightful statistics on what’s happening under the hood.&lt;/p&gt;

&lt;p&gt;In order to get more familiar with the slow query log’s format and what it can tell me about queries, I decided to turn it on locally.&lt;/p&gt;

&lt;h2 id="hello-slow-query-log"&gt;
&lt;a href="#hello-slow-query-log"&gt;&lt;/a&gt;Hello, slow query log&lt;/h2&gt;

&lt;p&gt;First, I logged on to my app’s MySQL instance as root so I could flip a couple switches.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; mysql -u root -p -h 127.0.0.1 -P 3306
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The slow query log’s controlled by the &lt;code&gt;slow_query_log&lt;/code&gt; variable. You can also customize what counts as a “slow query”. For learning purposes, I wanted the most pessimistic definition of a slow query, which is to say any query that takes any time to execute at all!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; set global slow_query_log = 'on';
mysql&amp;gt; set global long_query_time = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, I needed to figure out where this thing actually logs to. That’s another variable (which can be customized if needed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show variables like 'slow_query_log_file';

+---------------------+-------------------------------+
| Variable_name       | Value                         |
+---------------------+-------------------------------+
| slow_query_log_file | /var/lib/mysql/mysql-slow.log |
+---------------------+-------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="setting-up-a-feedback-loop"&gt;
&lt;a href="#setting-up-a-feedback-loop"&gt;&lt;/a&gt;Setting up a feedback loop&lt;/h2&gt;

&lt;p&gt;With that enabled, I opened another terminal and started tailing the log, so I could write queries in one window and see the results in the other. Boom, feedback loop!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; tail -f /var/lib/mysql/mysql-slow.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="grokking-the-output"&gt;
&lt;a href="#grokking-the-output"&gt;&lt;/a&gt;Grokking the output&lt;/h2&gt;

&lt;p&gt;Let’s fire off a query to see what it looks like. I started with something basic, &lt;code&gt;select id from notes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what my output looks like. The query’s at the bottom, with all the metrics about that query displayed as comments above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Time: 240229 13:17:28
# User@Host: root[root] @  [192.168.65.1]  Id:    66
# Schema: development_1  Last_errno: 0  Killed: 0
# ...  Rows_sent: 10025  Rows_examined: 10025  Rows_affected: 0
# Bytes_sent: 110358  Tmp_tables: 0  Tmp_disk_tables: 0  Tmp_table_sizes: 0
# InnoDB_trx_id: FE20C
# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No
# Filesort: No  Filesort_on_disk: No  Merge_passes: 0
#   InnoDB_IO_r_ops: 0  InnoDB_IO_r_bytes: 0  InnoDB_IO_r_wait: 0.000000
#   InnoDB_rec_lock_wait: 0.000000  InnoDB_queue_wait: 0.000000
#   InnoDB_pages_distinct: 14
select id from notes;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s a lot of output here, but what I focused on first was &lt;code&gt;Rows_sent&lt;/code&gt; and &lt;code&gt;Rows_examined&lt;/code&gt;. When these values differ wildly, it can be a sign that the query is not as performant as it could be.&lt;/p&gt;

&lt;h2 id="examining-rowsexamined"&gt;
&lt;a href="#examining-rowsexamined"&gt;&lt;/a&gt;Examining &lt;code&gt;Rows_examined&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Right now, my &lt;code&gt;notes&lt;/code&gt; table has 20,036 records in it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select count(*) from notes;
+----------+
| count(*) |
+----------+
|    20036 |
+----------+
1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I issue a simple query to fetch all the IDs, &lt;code&gt;Rows_sent&lt;/code&gt; and &lt;code&gt;Rows_examined&lt;/code&gt; are identical, since MySQL can use the &lt;code&gt;PRIMARY&lt;/code&gt; index without any additional overhead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Rows_sent: 20036  Rows_examined: 20036  Rows_affected: 0
select id from notes;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happens if I add an &lt;code&gt;order by&lt;/code&gt; on a column which is &lt;em&gt;not&lt;/em&gt; indexed?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Rows_sent: 20036  Rows_examined: 40072  Rows_affected: 0
select id from notes order by date;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Rows_examined&lt;/code&gt; doubles!&lt;/p&gt;

&lt;p&gt;Compare this to ordering by &lt;code&gt;account_id&lt;/code&gt;, which &lt;em&gt;is&lt;/em&gt; indexed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Rows_sent: 20036  Rows_examined: 20036  Rows_affected: 0
select id from notes order by account_id;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m guessing that since MySQL is able to pull that query in the same order as the index, there’s no additional overhead to the sort. On the other hand, sorting by an un-indexed column looks like it’s two steps: pulling the data, then looking at &lt;code&gt;date&lt;/code&gt; on each row.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;
&lt;a href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I learned a few useful things from playing around with the slow query log:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being able to see instant telemetry about the query I just ran makes for a great feedback loop. It doesn’t address the challenge of reproducing a poorly-performing query locally, but being able to experiment and understand the output comes in handy when looking at real slow-query logs from production.&lt;/li&gt;
  &lt;li&gt;The slow-query log makes a great complement to an &lt;code&gt;EXPLAIN&lt;/code&gt; plan: an &lt;code&gt;EXPLAIN&lt;/code&gt; tells you what’s &lt;em&gt;going&lt;/em&gt; to happen, whereas the slow query log tells you what &lt;em&gt;actually&lt;/em&gt; happened.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it for now!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2023-11-10:/read/grokking-instance-eval/</id>
    <title type="html">Grokking instance_eval</title>
    <published>2023-11-10T00:00:00Z</published>
    <updated>2023-11-10T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/grokking-instance-eval/" type="text/html"/>
    <content type="html">&lt;p&gt;During a recent hackathon at work, I wanted to see how far I could get implementing Rails from scratch. (Spoiler alert: we got a basic “hello world” working with some routes, a controller and a model!)&lt;/p&gt;

&lt;p&gt;One of the first things we did was implement a &lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;DSL&lt;/a&gt; for defining routes. We wanted to mimic the &lt;code&gt;draw&lt;/code&gt; interface from Rails, where you provide a block:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Along the way, I finally wrapped my head around &lt;code&gt;instance_eval&lt;/code&gt;, one of the great staples of metaprogramming in Ruby.&lt;/p&gt;

&lt;h2 id="starting-small"&gt;
&lt;a href="#starting-small"&gt;&lt;/a&gt;Starting small&lt;/h2&gt;

&lt;p&gt;Normally, passing a block around is pretty easy if all you want to do is control when it’s executed. You could do something like this:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Defining routes..."&lt;/span&gt;
  &lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Routes:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [:get, "users", "users#index"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… but that’s not very useful! We can’t really make a DSL this way because our block isn’t running within any special context, so we have nowhere to define methods like &lt;code&gt;#get&lt;/code&gt;, &lt;code&gt;#post&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;One option would be to pass some kind of configuration class into the block:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RouteConfig&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:routes&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller_action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller_action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Defining routes..."&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RouteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Routes:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [["users", "users#index"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’re getting somewhere: we can start building up a DSL in the &lt;code&gt;RouteConfig&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;But hang on - the Rails implementation doesn’t do this. The block passed to &lt;code&gt;draw&lt;/code&gt; takes no arguments, yet we can still use the routes DSL within it. What’s going on?&lt;/p&gt;

&lt;h2 id="the-magic-of-instanceeval-"&gt;
&lt;a href="#the-magic-of-instanceeval-"&gt;&lt;/a&gt;The magic of instance_eval ✨&lt;/h2&gt;
&lt;p&gt;Enter &lt;a href="https://www.rubydoc.info/stdlib/core/BasicObject:instance_eval"&gt;&lt;code&gt;instance_eval&lt;/code&gt;&lt;/a&gt;. This Ruby method allows you to execute code in the context of another object. Effectively, it sets the value of &lt;code&gt;self&lt;/code&gt; within the block to be whatever object you’re calling &lt;code&gt;instance_eval&lt;/code&gt; on.&lt;/p&gt;

&lt;p&gt;With this in mind, we can refactor to call &lt;code&gt;instance_eval&lt;/code&gt; on an instance of &lt;code&gt;RouteConfig&lt;/code&gt;. Cool!&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Defining routes..."&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RouteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Routes:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [["users", "users#index"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Under the hood, Rails actually uses &lt;a href="https://www.rubydoc.info/stdlib/core/BasicObject#instance_exec-instance_method"&gt;&lt;code&gt;#instance_exec&lt;/code&gt;&lt;/a&gt;, which functions the same but allows you to pass arguments into the block, too. Although based on &lt;a href="https://github.com/rails/rails/blob/16607e349a0a371b403ae04489f9af9acfab9f17/actionpack/lib/action_dispatch/routing/route_set.rb#L444-L450"&gt;how it’s being used&lt;/a&gt;, I think &lt;code&gt;instance_eval&lt;/code&gt; would work just as well.)&lt;/p&gt;

&lt;h2 id="detour-blocks-and-closures"&gt;
&lt;a href="#detour-blocks-and-closures"&gt;&lt;/a&gt;Detour: blocks and closures&lt;/h2&gt;

&lt;p&gt;Along the way to arriving at the solution, we ended up making a small mistake which led to a deeper understanding - my favourite kind of mistake!&lt;/p&gt;

&lt;p&gt;The first time we tried using &lt;code&gt;instance_eval&lt;/code&gt;, we wrapped &lt;code&gt;block.call&lt;/code&gt; within another block, like this:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This did not work:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="sb"&gt;`get' for main:Object (NoMethodError)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This left us scratching our heads for awhile until my coworker suggested &lt;code&gt;instance_eval(&amp;amp;block)&lt;/code&gt;, which worked. But &lt;em&gt;why&lt;/em&gt; did it work?&lt;/p&gt;

&lt;p&gt;It’s subtle, but in the example above there are two execution contexts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The context within the &lt;code&gt;instance_eval&lt;/code&gt; block, in which we already know &lt;code&gt;self&lt;/code&gt; will point to the receiving object;&lt;/li&gt;
  &lt;li&gt;The context of the block itself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we execute &lt;code&gt;block.call&lt;/code&gt; explicitly, the code within our block will run in its own context. The things it has access to - methods, variables, etc - are determined by this context. Another way of saying this is that the block &lt;em&gt;creates a &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;closure&lt;/a&gt;&lt;/em&gt; around the things it had access to wherever it was defined.&lt;/p&gt;

&lt;p&gt;That’s why we can define a local variable outside of the block, but still have access to it when the block eventually executes:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Pepper"&lt;/span&gt;
  &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Alex"&lt;/span&gt;
&lt;span class="n"&gt;run_block&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"My name is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# My name is Alex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s also what the error was trying to tell us: &lt;code&gt;undefined method 'get' for main:Object&lt;/code&gt; is saying that the context in which the block was defined - the top-level, &lt;code&gt;main&lt;/code&gt; context - doesn’t have a method named &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, back to &lt;code&gt;instance_eval&lt;/code&gt;. When we write our &lt;code&gt;#draw_routes&lt;/code&gt; method like this:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RouteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re passing our block &lt;em&gt;directly&lt;/em&gt; to &lt;code&gt;instance_eval&lt;/code&gt;, which means that our block will have its execution context modified so that &lt;code&gt;self&lt;/code&gt; refers to the receiving object.&lt;/p&gt;

&lt;p&gt;But wait, does it still keep its original closure? It sure does:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;users_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;
&lt;span class="n"&gt;users_action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;users_endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;users_action&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [["users", "users#index"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I probably won’t have occasion to use &lt;code&gt;instance_eval&lt;/code&gt; any time soon in my day-to-day work, but it’s always fun digging into Ruby and gaining a deeper understanding.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2023-08-17:/read/the-20-20-20-rule/</id>
    <title type="html">The 20/20/20 Rule for Micro-breaks</title>
    <published>2023-08-17T00:00:00Z</published>
    <updated>2023-08-17T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/the-20-20-20-rule/" type="text/html"/>
    <content type="html">&lt;p&gt;The 20/20/20 rule has changed how I work, for the better – and not just for my eyes!&lt;/p&gt;

&lt;p&gt;A few months ago, I started noticing my eyes becoming increasingly dry and tired after a long day staring at my computer screen. It’s so easy to forget to take breaks when you’re in the zone, and I realized I was becoming increasingly guilty of this.&lt;/p&gt;

&lt;p&gt;When I started thinking about how I could build more regular breaks into my routine, I remembered something my optometrist told me about: &lt;a href="https://opto.ca/eye-health-library/20-20-20-rule"&gt;&lt;strong&gt;the 20/20/20 rule&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="minutes-20-seconds-20-feet"&gt;
&lt;a href="#minutes-20-seconds-20-feet"&gt;&lt;/a&gt;20 minutes, 20 seconds, 20 feet&lt;/h2&gt;

&lt;p&gt;Here’s how the 20/20/20 rule works:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every 20 minutes&lt;/strong&gt;, give your eyes a break by focusing on something &lt;strong&gt;20 feet away&lt;/strong&gt; for at least &lt;strong&gt;20 seconds&lt;/strong&gt;. This helps relax your eyes and goes a long way to prevent eye-strain from screen use.&lt;/p&gt;

&lt;p&gt;(The sole disadvantage of the metric system is that 20/20/6.096 just doesn’t have the same ring to it. But I digress!)&lt;/p&gt;

&lt;p&gt;There are lots of apps that help automate this habit: I ended up settling on &lt;a href="https://apps.apple.com/us/app/intermission-breaks-for-eyes/id1439431081?mt=12"&gt;Intermission&lt;/a&gt; for macOS, which is simple and flexible.&lt;/p&gt;

&lt;h2 id="the-20-second-check-in"&gt;
&lt;a href="#the-20-second-check-in"&gt;&lt;/a&gt;The 20-second check-in&lt;/h2&gt;

&lt;p&gt;Following this rule has definitely helped with my eye strain – I’ve even got my coworkers in on it when the reminder pops up during a screen share!&lt;/p&gt;

&lt;p&gt;But it’s not just my eyes that have benefited from this. I’ve started using the breaks in a few different ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;strong&gt;Avoid rabbit-holing&lt;/strong&gt;. If I’ve been stuck on something, I’ll ask myself during the break: what’s the real problem I’m trying to solve? Have I made any progress, or should I change my approach / ask someone for help?&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;Take a step back&lt;/strong&gt;. How am I feeling? Am I stressed? Am I in the zone?&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;Move around.&lt;/strong&gt; I’ll shake out my wrists or do some neck stretches while I stare off into the distance, and I might use the opportunity to switch from sitting to standing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="give-it-a-shot"&gt;
&lt;a href="#give-it-a-shot"&gt;&lt;/a&gt;Give it a shot!&lt;/h2&gt;

&lt;p&gt;I’ve really started to enjoy the cadence of these quick micro-breaks. One of the downsides is that it makes you extremely aware of the passage of time – especially if you use an app that never ceases to remind you. But overall, I’ve found it works well for me. My eyes certainly thank me for it!&lt;/p&gt;

&lt;p&gt;If you also find yourself in need of more breaks, I’d encourage you to give the 20/20/20 rule a try!&lt;/p&gt;
</content>
  </entry>
</feed>

