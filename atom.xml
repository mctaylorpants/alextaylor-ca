<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://alextaylor.ca/">
  <id>https://alextaylor.ca/</id>
  <title>alextaylor.ca</title>
  <updated>2025-03-24T00:00:00Z</updated>
  <link rel="alternate" href="https://alextaylor.ca/" type="text/html"/>
  <link rel="self" href="https://alextaylor.ca/atom.xml" type="application/atom+xml"/>
  <author>
    <name>Alex Taylor</name>
    <uri>https://alextaylor.ca</uri>
  </author>
  <entry>
    <id>tag:alextaylor.ca,2025-03-24:/read/down-a-qmk-rabbit-hole/</id>
    <title type="html">Down a QMK rabbit hole</title>
    <published>2025-03-24T00:00:00Z</published>
    <updated>2025-03-24T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/down-a-qmk-rabbit-hole/" type="text/html"/>
    <content type="html">&lt;p&gt;Today I went down a fun rabbit hole of &lt;a href="https://qmk.fm/"&gt;QMK&lt;/a&gt;, the open-source firmware for mechanical keyboards (and other input devices). Like the start of any good rabbit hole, it all started with an extremely specific mission: fixing a minor nit with my new keyboard.&lt;/p&gt;

&lt;h2 id="tapping-too-fast"&gt;
&lt;a href="#tapping-too-fast"&gt;&lt;/a&gt;TAPPING too fast&lt;/h2&gt;
&lt;p&gt;I bought a &lt;a href="https://nuphy.com/collections/keyboards/products/air75-v2"&gt;NuPhy Air75 V2&lt;/a&gt; to try out a low-profile mechanical keyboard (it‚Äôs also nice that it‚Äôs wireless!).&lt;/p&gt;

&lt;p&gt;I started using &lt;a href="https://caniusevia.com/"&gt;VIA Configurator&lt;/a&gt; to remap keys. In particular, I wanted to try a home-row arrow setup which would let me use the vim-style mapping of h, j, k, and l as ‚Üê, ‚Üë, ‚Üì, and ‚Üí. Since I still obviously want to use those keys for their intended alphabetical purpose, a modifier key was in order. Hey, Caps Lock is on the home row too, and I already remap it to Esc‚Ä¶ why not modify it even further so that holding down Caps Lock triggers another layer?&lt;/p&gt;

&lt;p&gt;After a few trips to Google and Claude, I got the mapping code I wanted:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
LT(7, KC_ESC)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I used the &lt;code&gt;LT&lt;/code&gt; (‚Äúlayer tap‚Äù) function to activate layer 7 when held, or Esc when tapped. From there, it was a simple matter to remap h, j, k and l to the arrow keys on layer 7. Perfect!&lt;/p&gt;

&lt;p&gt;‚Ä¶ and then I tried using it.&lt;/p&gt;

&lt;p&gt;As it turns out, when I use arrow keys, I use them quickly. I‚Äôm often tapping up on the command-line or in the address bar to navigate history. Using the layer-tap, I found it wasn‚Äôt responding quickly enough and I‚Äôd end up sending ‚Äúk‚Äù instead of ‚Äúup‚Äù unless I held down Caps Lock for a (admittedly minuscule, but nevertheless infuriating) moment.&lt;/p&gt;

&lt;p&gt;More trips to the search gods led me to a tantalizing solution: a config setting named ‚Äú&lt;a href="https://docs.qmk.fm/tap_hold#hold-on-other-key-press"&gt;Hold On Other Key Press&lt;/a&gt;‚Äù. From the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This mode makes tap and hold keys (like Layer Tap) work better for fast typists&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It me! Problem solved. Except, this option is &lt;em&gt;not&lt;/em&gt; configurable through VIA Configurator: it‚Äôs a lower-level configuration that needs to be set in the firmware itself.&lt;/p&gt;

&lt;p&gt;Enter my QMK rabbit hole.&lt;/p&gt;

&lt;h2 id="down-we-go"&gt;
&lt;a href="#down-we-go"&gt;&lt;/a&gt;Down we go‚Ä¶&lt;/h2&gt;

&lt;p&gt;As far as rabbit holes go, this ended up being a shallow one. QMK‚Äôs toolchain is really nice, and pleasant to work with. I ran through &lt;a href="https://docs.qmk.fm/newbs_getting_started"&gt;the tutorial&lt;/a&gt; and found my way to Reddit when I realized that NuPhy‚Äôs QMK support is not particularly straightforward.&lt;/p&gt;

&lt;p&gt;Here‚Äôs what I ended up doing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up QMK with NuPhy‚Äôs custom branch.&lt;/strong&gt; I found &lt;a href="https://www.reddit.com/r/NuPhy/comments/1dsve0c/compiling_qmk_for_nuphy_keyboards_spoiler_alert/"&gt;a helpful Reddit post&lt;/a&gt; on how to do this, since NuPhy‚Äôs keyboards haven‚Äôt made their way into the main QMK repo yet - they‚Äôve got their own fork.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
qmk setup nuphy-src/qmk_firmware -b nuphy-keyboards
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mercifully, I had none of the compile issues mentioned in the thread!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take the compiler for a spin.&lt;/strong&gt; As suggested in the Reddit post, I tried compiling the keymap built for VIA Configurator:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
qmk compile -kb nuphy/air75_v2/ansi -km via
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This generated a &lt;code&gt;.bin&lt;/code&gt; file, which I could use to‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flash the firmware.&lt;/strong&gt; I used &lt;a href="https://qmk.fm/toolbox"&gt;QMK Toolbox&lt;/a&gt; to load the &lt;code&gt;.bin&lt;/code&gt; file and flash the firmware on to my keyboard (which involved holding down Esc when you plug it in to boot the keyboard into flashing mode).&lt;/p&gt;

&lt;h2 id="new-firmware-who-dis"&gt;
&lt;a href="#new-firmware-who-dis"&gt;&lt;/a&gt;New firmware, who dis?&lt;/h2&gt;

&lt;p&gt;After poking around with various configuration files, I got myself oriented:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;code&gt;keyboards/nuphy/air75_v2/ansi&lt;/code&gt; is the root folder of the firmware I‚Äôm working with; it‚Äôs full of C files that configure the keyboard itself, and what ends up compiling down to the &lt;code&gt;.bin&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Within this folder, &lt;code&gt;config.h&lt;/code&gt; contains a bunch of - unsurprisingly - config directives. Here I added one line: &lt;strong&gt;&lt;code&gt;#define HOLD_ON_OTHER_KEY_PRESS&lt;/code&gt;&lt;/strong&gt;, which is the whole reason I went on this journey in the first place!&lt;/li&gt;
  &lt;li&gt;There‚Äôs a &lt;code&gt;keymaps&lt;/code&gt; folder where you can store various mappings of the keys themselves. I suppose this is more ‚Äúuser-facing‚Äù so it‚Äôs kept separate from the lower-level config of the keyboard. I know you can define your own custom keymap, but I didn‚Äôt touch anything in here because I want to keep using VIA Configurator while I‚Äôm playing around layout.&lt;/li&gt;
  &lt;li&gt;Finally, I have a &lt;code&gt;json&lt;/code&gt; file I exported from VIA Configurator‚Äôs web UI after I set up my key mappings. This is &lt;em&gt;not&lt;/em&gt; the same format as QMK‚Äôs JSON format (&lt;a href="https://github.com/nuphy-src/qmk_firmware/blob/nuphy-keyboards/keyboards/nuphy/air75_v2/ansi/keymaps/via/NuPhy%20Air75%20V2%20via3.json"&gt;like this one provided by NuPhy for use in VIA&lt;/a&gt;), which was confusing to me at first. For VIA, I think the QMK JSON file is used to load in the keyboard definition, and the exportable JSON file is just used for saving the updated key mapping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually once I‚Äôm reasonably happy with the layout, I could conceivably compile it directly into the default keymap. But for now, this toolchain works nicely!&lt;/p&gt;

&lt;p&gt;And the best part: now my arrow-taps are lightning fast! ‚ö°Ô∏è&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2024-03-07:/read/mysql-slow-query-log/</id>
    <title type="html">Playing with MySQL's slow query log</title>
    <published>2024-03-07T00:00:00Z</published>
    <updated>2024-03-07T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/mysql-slow-query-log/" type="text/html"/>
    <content type="html">&lt;p&gt;Like any developer, I love a good feedback loop. Not only is a quick feedback loop essential for flow, it‚Äôs also usually the best way to wrap your head around how something works.&lt;/p&gt;

&lt;p&gt;But feedback loops can be harder to come by when you‚Äôre dealing with optimizing poorly-performing database queries. A bad query in production is like a bug that needs to be reproduced - or at least understood - before you can fix it; but since the poor performance is almost always related to the data it‚Äôs operating on, you can‚Äôt usually run it locally and get the same results. (And I hope you can‚Äôt ‚Äújust‚Äù run it in a console on production, either! üò±)&lt;/p&gt;

&lt;p&gt;So instead of feedback loops, we need to rely on telemetry, like &lt;code&gt;EXPLAIN&lt;/code&gt;s run on production or MySQL‚Äôs slow query log, which provides insightful statistics on what‚Äôs happening under the hood.&lt;/p&gt;

&lt;p&gt;In order to get more familiar with the slow query log‚Äôs format and what it can tell me about queries, I decided to turn it on locally.&lt;/p&gt;

&lt;h2 id="hello-slow-query-log"&gt;
&lt;a href="#hello-slow-query-log"&gt;&lt;/a&gt;Hello, slow query log&lt;/h2&gt;

&lt;p&gt;First, I logged on to my app‚Äôs MySQL instance as root so I could flip a couple switches.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; mysql -u root -p -h 127.0.0.1 -P 3306
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The slow query log‚Äôs controlled by the &lt;code&gt;slow_query_log&lt;/code&gt; variable. You can also customize what counts as a ‚Äúslow query‚Äù. For learning purposes, I wanted the most pessimistic definition of a slow query, which is to say any query that takes any time to execute at all!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; set global slow_query_log = 'on';
mysql&amp;gt; set global long_query_time = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, I needed to figure out where this thing actually logs to. That‚Äôs another variable (which can be customized if needed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show variables like 'slow_query_log_file';

+---------------------+-------------------------------+
| Variable_name       | Value                         |
+---------------------+-------------------------------+
| slow_query_log_file | /var/lib/mysql/mysql-slow.log |
+---------------------+-------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="setting-up-a-feedback-loop"&gt;
&lt;a href="#setting-up-a-feedback-loop"&gt;&lt;/a&gt;Setting up a feedback loop&lt;/h2&gt;

&lt;p&gt;With that enabled, I opened another terminal and started tailing the log, so I could write queries in one window and see the results in the other. Boom, feedback loop!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; tail -f /var/lib/mysql/mysql-slow.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="grokking-the-output"&gt;
&lt;a href="#grokking-the-output"&gt;&lt;/a&gt;Grokking the output&lt;/h2&gt;

&lt;p&gt;Let‚Äôs fire off a query to see what it looks like. I started with something basic, &lt;code&gt;select id from notes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here‚Äôs what my output looks like. The query‚Äôs at the bottom, with all the metrics about that query displayed as comments above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Time: 240229 13:17:28
# User@Host: root[root] @  [192.168.65.1]  Id:    66
# Schema: development_1  Last_errno: 0  Killed: 0
# ...  Rows_sent: 10025  Rows_examined: 10025  Rows_affected: 0
# Bytes_sent: 110358  Tmp_tables: 0  Tmp_disk_tables: 0  Tmp_table_sizes: 0
# InnoDB_trx_id: FE20C
# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No
# Filesort: No  Filesort_on_disk: No  Merge_passes: 0
#   InnoDB_IO_r_ops: 0  InnoDB_IO_r_bytes: 0  InnoDB_IO_r_wait: 0.000000
#   InnoDB_rec_lock_wait: 0.000000  InnoDB_queue_wait: 0.000000
#   InnoDB_pages_distinct: 14
select id from notes;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There‚Äôs a lot of output here, but what I focused on first was &lt;code&gt;Rows_sent&lt;/code&gt; and &lt;code&gt;Rows_examined&lt;/code&gt;. When these values differ wildly, it can be a sign that the query is not as performant as it could be.&lt;/p&gt;

&lt;h2 id="examining-rowsexamined"&gt;
&lt;a href="#examining-rowsexamined"&gt;&lt;/a&gt;Examining &lt;code&gt;Rows_examined&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Right now, my &lt;code&gt;notes&lt;/code&gt; table has 20,036 records in it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select count(*) from notes;
+----------+
| count(*) |
+----------+
|    20036 |
+----------+
1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I issue a simple query to fetch all the IDs, &lt;code&gt;Rows_sent&lt;/code&gt; and &lt;code&gt;Rows_examined&lt;/code&gt; are identical, since MySQL can use the &lt;code&gt;PRIMARY&lt;/code&gt; index without any additional overhead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Rows_sent: 20036  Rows_examined: 20036  Rows_affected: 0
select id from notes;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happens if I add an &lt;code&gt;order by&lt;/code&gt; on a column which is &lt;em&gt;not&lt;/em&gt; indexed?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Rows_sent: 20036  Rows_examined: 40072  Rows_affected: 0
select id from notes order by date;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Rows_examined&lt;/code&gt; doubles!&lt;/p&gt;

&lt;p&gt;Compare this to ordering by &lt;code&gt;account_id&lt;/code&gt;, which &lt;em&gt;is&lt;/em&gt; indexed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Rows_sent: 20036  Rows_examined: 20036  Rows_affected: 0
select id from notes order by account_id;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I‚Äôm guessing that since MySQL is able to pull that query in the same order as the index, there‚Äôs no additional overhead to the sort. On the other hand, sorting by an un-indexed column looks like it‚Äôs two steps: pulling the data, then looking at &lt;code&gt;date&lt;/code&gt; on each row.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;
&lt;a href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I learned a few useful things from playing around with the slow query log:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being able to see instant telemetry about the query I just ran makes for a great feedback loop. It doesn‚Äôt address the challenge of reproducing a poorly-performing query locally, but being able to experiment and understand the output comes in handy when looking at real slow-query logs from production.&lt;/li&gt;
  &lt;li&gt;The slow-query log makes a great complement to an &lt;code&gt;EXPLAIN&lt;/code&gt; plan: an &lt;code&gt;EXPLAIN&lt;/code&gt; tells you what‚Äôs &lt;em&gt;going&lt;/em&gt; to happen, whereas the slow query log tells you what &lt;em&gt;actually&lt;/em&gt; happened.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That‚Äôs it for now!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2023-11-10:/read/grokking-instance-eval/</id>
    <title type="html">Grokking instance_eval</title>
    <published>2023-11-10T00:00:00Z</published>
    <updated>2023-11-10T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/grokking-instance-eval/" type="text/html"/>
    <content type="html">&lt;p&gt;During a recent hackathon at work, I wanted to see how far I could get implementing Rails from scratch. (Spoiler alert: we got a basic ‚Äúhello world‚Äù working with some routes, a controller and a model!)&lt;/p&gt;

&lt;p&gt;One of the first things we did was implement a &lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;DSL&lt;/a&gt; for defining routes. We wanted to mimic the &lt;code&gt;draw&lt;/code&gt; interface from Rails, where you provide a block:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Along the way, I finally wrapped my head around &lt;code&gt;instance_eval&lt;/code&gt;, one of the great staples of metaprogramming in Ruby.&lt;/p&gt;

&lt;h2 id="starting-small"&gt;
&lt;a href="#starting-small"&gt;&lt;/a&gt;Starting small&lt;/h2&gt;

&lt;p&gt;Normally, passing a block around is pretty easy if all you want to do is control when it‚Äôs executed. You could do something like this:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Defining routes..."&lt;/span&gt;
  &lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Routes:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [:get, "users", "users#index"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‚Ä¶ but that‚Äôs not very useful! We can‚Äôt really make a DSL this way because our block isn‚Äôt running within any special context, so we have nowhere to define methods like &lt;code&gt;#get&lt;/code&gt;, &lt;code&gt;#post&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;One option would be to pass some kind of configuration class into the block:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RouteConfig&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:routes&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller_action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller_action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Defining routes..."&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RouteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Routes:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [["users", "users#index"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we‚Äôre getting somewhere: we can start building up a DSL in the &lt;code&gt;RouteConfig&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;But hang on - the Rails implementation doesn‚Äôt do this. The block passed to &lt;code&gt;draw&lt;/code&gt; takes no arguments, yet we can still use the routes DSL within it. What‚Äôs going on?&lt;/p&gt;

&lt;h2 id="the-magic-of-instanceeval-"&gt;
&lt;a href="#the-magic-of-instanceeval-"&gt;&lt;/a&gt;The magic of instance_eval ‚ú®&lt;/h2&gt;
&lt;p&gt;Enter &lt;a href="https://www.rubydoc.info/stdlib/core/BasicObject:instance_eval"&gt;&lt;code&gt;instance_eval&lt;/code&gt;&lt;/a&gt;. This Ruby method allows you to execute code in the context of another object. Effectively, it sets the value of &lt;code&gt;self&lt;/code&gt; within the block to be whatever object you‚Äôre calling &lt;code&gt;instance_eval&lt;/code&gt; on.&lt;/p&gt;

&lt;p&gt;With this in mind, we can refactor to call &lt;code&gt;instance_eval&lt;/code&gt; on an instance of &lt;code&gt;RouteConfig&lt;/code&gt;. Cool!&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Defining routes..."&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RouteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Routes:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [["users", "users#index"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Under the hood, Rails actually uses &lt;a href="https://www.rubydoc.info/stdlib/core/BasicObject#instance_exec-instance_method"&gt;&lt;code&gt;#instance_exec&lt;/code&gt;&lt;/a&gt;, which functions the same but allows you to pass arguments into the block, too. Although based on &lt;a href="https://github.com/rails/rails/blob/16607e349a0a371b403ae04489f9af9acfab9f17/actionpack/lib/action_dispatch/routing/route_set.rb#L444-L450"&gt;how it‚Äôs being used&lt;/a&gt;, I think &lt;code&gt;instance_eval&lt;/code&gt; would work just as well.)&lt;/p&gt;

&lt;h2 id="detour-blocks-and-closures"&gt;
&lt;a href="#detour-blocks-and-closures"&gt;&lt;/a&gt;Detour: blocks and closures&lt;/h2&gt;

&lt;p&gt;Along the way to arriving at the solution, we ended up making a small mistake which led to a deeper understanding - my favourite kind of mistake!&lt;/p&gt;

&lt;p&gt;The first time we tried using &lt;code&gt;instance_eval&lt;/code&gt;, we wrapped &lt;code&gt;block.call&lt;/code&gt; within another block, like this:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This did not work:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="sb"&gt;`get' for main:Object (NoMethodError)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This left us scratching our heads for awhile until my coworker suggested &lt;code&gt;instance_eval(&amp;amp;block)&lt;/code&gt;, which worked. But &lt;em&gt;why&lt;/em&gt; did it work?&lt;/p&gt;

&lt;p&gt;It‚Äôs subtle, but in the example above there are two execution contexts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The context within the &lt;code&gt;instance_eval&lt;/code&gt; block, in which we already know &lt;code&gt;self&lt;/code&gt; will point to the receiving object;&lt;/li&gt;
  &lt;li&gt;The context of the block itself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we execute &lt;code&gt;block.call&lt;/code&gt; explicitly, the code within our block will run in its own context. The things it has access to - methods, variables, etc - are determined by this context. Another way of saying this is that the block &lt;em&gt;creates a &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;closure&lt;/a&gt;&lt;/em&gt; around the things it had access to wherever it was defined.&lt;/p&gt;

&lt;p&gt;That‚Äôs why we can define a local variable outside of the block, but still have access to it when the block eventually executes:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Pepper"&lt;/span&gt;
  &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Alex"&lt;/span&gt;
&lt;span class="n"&gt;run_block&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"My name is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# My name is Alex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It‚Äôs also what the error was trying to tell us: &lt;code&gt;undefined method 'get' for main:Object&lt;/code&gt; is saying that the context in which the block was defined - the top-level, &lt;code&gt;main&lt;/code&gt; context - doesn‚Äôt have a method named &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, back to &lt;code&gt;instance_eval&lt;/code&gt;. When we write our &lt;code&gt;#draw_routes&lt;/code&gt; method like this:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RouteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;route_config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We‚Äôre passing our block &lt;em&gt;directly&lt;/em&gt; to &lt;code&gt;instance_eval&lt;/code&gt;, which means that our block will have its execution context modified so that &lt;code&gt;self&lt;/code&gt; refers to the receiving object.&lt;/p&gt;

&lt;p&gt;But wait, does it still keep its original closure? It sure does:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;users_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;
&lt;span class="n"&gt;users_action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"users#index"&lt;/span&gt;

&lt;span class="n"&gt;draw_routes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;users_endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;users_action&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Defining routes...&lt;/span&gt;
&lt;span class="c1"&gt;# Routes:&lt;/span&gt;
&lt;span class="c1"&gt;# [["users", "users#index"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I probably won‚Äôt have occasion to use &lt;code&gt;instance_eval&lt;/code&gt; any time soon in my day-to-day work, but it‚Äôs always fun digging into Ruby and gaining a deeper understanding.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2023-08-17:/read/the-20-20-20-rule/</id>
    <title type="html">The 20/20/20 Rule for Micro-breaks</title>
    <published>2023-08-17T00:00:00Z</published>
    <updated>2023-08-17T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/the-20-20-20-rule/" type="text/html"/>
    <content type="html">&lt;p&gt;The 20/20/20 rule has changed how I work, for the better ‚Äì and not just for my eyes!&lt;/p&gt;

&lt;p&gt;A few months ago, I started noticing my eyes becoming increasingly dry and tired after a long day staring at my computer screen. It‚Äôs so easy to forget to take breaks when you‚Äôre in the zone, and I realized I was becoming increasingly guilty of this.&lt;/p&gt;

&lt;p&gt;When I started thinking about how I could build more regular breaks into my routine, I remembered something my optometrist told me about: &lt;a href="https://opto.ca/eye-health-library/20-20-20-rule"&gt;&lt;strong&gt;the 20/20/20 rule&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="minutes-20-seconds-20-feet"&gt;
&lt;a href="#minutes-20-seconds-20-feet"&gt;&lt;/a&gt;20 minutes, 20 seconds, 20 feet&lt;/h2&gt;

&lt;p&gt;Here‚Äôs how the 20/20/20 rule works:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every 20 minutes&lt;/strong&gt;, give your eyes a break by focusing on something &lt;strong&gt;20 feet away&lt;/strong&gt; for at least &lt;strong&gt;20 seconds&lt;/strong&gt;. This helps relax your eyes and goes a long way to prevent eye-strain from screen use.&lt;/p&gt;

&lt;p&gt;(The sole disadvantage of the metric system is that 20/20/6.096 just doesn‚Äôt have the same ring to it. But I digress!)&lt;/p&gt;

&lt;p&gt;There are lots of apps that help automate this habit: I ended up settling on &lt;a href="https://apps.apple.com/us/app/intermission-breaks-for-eyes/id1439431081?mt=12"&gt;Intermission&lt;/a&gt; for macOS, which is simple and flexible.&lt;/p&gt;

&lt;h2 id="the-20-second-check-in"&gt;
&lt;a href="#the-20-second-check-in"&gt;&lt;/a&gt;The 20-second check-in&lt;/h2&gt;

&lt;p&gt;Following this rule has definitely helped with my eye strain ‚Äì I‚Äôve even got my coworkers in on it when the reminder pops up during a screen share!&lt;/p&gt;

&lt;p&gt;But it‚Äôs not just my eyes that have benefited from this. I‚Äôve started using the breaks in a few different ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;strong&gt;Avoid rabbit-holing&lt;/strong&gt;. If I‚Äôve been stuck on something, I‚Äôll ask myself during the break: what‚Äôs the real problem I‚Äôm trying to solve? Have I made any progress, or should I change my approach / ask someone for help?&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;Take a step back&lt;/strong&gt;. How am I feeling? Am I stressed? Am I in the zone?&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;Move around.&lt;/strong&gt; I‚Äôll shake out my wrists or do some neck stretches while I stare off into the distance, and I might use the opportunity to switch from sitting to standing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="give-it-a-shot"&gt;
&lt;a href="#give-it-a-shot"&gt;&lt;/a&gt;Give it a shot!&lt;/h2&gt;

&lt;p&gt;I‚Äôve really started to enjoy the cadence of these quick micro-breaks. One of the downsides is that it makes you extremely aware of the passage of time ‚Äì especially if you use an app that never ceases to remind you. But overall, I‚Äôve found it works well for me. My eyes certainly thank me for it!&lt;/p&gt;

&lt;p&gt;If you also find yourself in need of more breaks, I‚Äôd encourage you to give the 20/20/20 rule a try!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:alextaylor.ca,2023-03-04:/read/adventures-in-time-debugging-a-daylight-saving-bug/</id>
    <title type="html">Adventures in Time: Debugging a Daylight Saving Bug</title>
    <published>2023-03-04T00:00:00Z</published>
    <updated>2023-03-04T00:00:00Z</updated>
    <link rel="alternate" href="https://alextaylor.ca/read/adventures-in-time-debugging-a-daylight-saving-bug/" type="text/html"/>
    <content type="html">&lt;p&gt;What‚Äôs more fun than bugs? Bugs involving time! And none are so fascinating as bugs involving &lt;em&gt;daylight saving time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With Daylight saving time almost upon us again, I thought it would be fun to revisit this bug my team and I stumbled across last fall.&lt;/p&gt;

&lt;h2 id="once-upon-a-time"&gt;
&lt;a href="#once-upon-a-time"&gt;&lt;/a&gt;Once upon a time‚Ä¶&lt;/h2&gt;
&lt;p&gt;When subscribing a customer to a monthly plan in our billing system, we calculate the date of the customer‚Äôs next bill by adding 30 days to their current time, and using that to create a subscription on Stripe.&lt;/p&gt;

&lt;p&gt;However, at some point in October, we started to see this fail:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidRequestError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
  &lt;span class="n"&gt;billing_cycle_anchor&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;later&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt;
  &lt;span class="n"&gt;natural&lt;/span&gt; &lt;span class="n"&gt;billing&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1669817382&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When comparing the ‚Äúnatural billing date‚Äù to the time we sent the request, it was indeed more than 30 days in the future ‚Äì by exactly an hour. Curious!&lt;/p&gt;

&lt;h2 id="arithmetick-tock-"&gt;
&lt;a href="#arithmetick-tock-"&gt;&lt;/a&gt;Arithmetick-tock ‚è∞&lt;/h2&gt;

&lt;p&gt;In the code, we were doing something roughly like this to calculate the billing date:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;started_at&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;started_at&lt;/code&gt; is a &lt;code&gt;Time&lt;/code&gt; object, and we‚Äôre using the &lt;code&gt;ActiveSupport::Duration&lt;/code&gt; helpers to advance that time by exactly 30 days. So what‚Äôs the issue?&lt;/p&gt;

&lt;p&gt;I fired up a console and started poking at this particular line of code to learn how it behaved.&lt;/p&gt;

&lt;p&gt;First, a sanity-check: I want to make sure I know that &lt;code&gt;.days&lt;/code&gt; is giving me what I expect:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-10-15 12:00:00 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;0700&lt;/span&gt;

&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-10-15 12:00:00 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;0700&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, good! I get the same answer if I add the total number of seconds in a day. Makes sense.&lt;/p&gt;

&lt;p&gt;Now, what happens if I do the same thing, but add 30 days?&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-10-15 12:00:00 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0800&lt;/span&gt;

&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-10-15 12:00:00 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0800&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aha! There‚Äôs our bug. Depending on whether I use a &lt;code&gt;Duration&lt;/code&gt; object or plain old seconds, I get a different answer. This feels like a daylight saving issue, since we‚Äôre crossing the boundary here, and our two times disagree by &lt;em&gt;exactly&lt;/em&gt; an hour.&lt;/p&gt;

&lt;p&gt;Next, I want to confirm that this has something to do with crossing the daylight saving boundary. Let‚Äôs try the same test, but using a time that‚Äôs right before the boundary. Daylight saving ended on November 6, 2022 at 2am, so let‚Äôs start from 1 second before and add 1 day:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-11-06 01:59:59 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0800&lt;/span&gt;

&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-11-06 01:59:59 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0800&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Still behaves the same. So we can confidently say that &lt;strong&gt;when crossing the DST boundary, adding a Duration to a timestamp yields a different time than adding a number of seconds.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="testing-the-hypothesis"&gt;
&lt;a href="#testing-the-hypothesis"&gt;&lt;/a&gt;Testing the hypothesis&lt;/h2&gt;

&lt;p&gt;So which of the two answers above is correct?&lt;/p&gt;

&lt;p&gt;It‚Äôs easier to answer that question with a shorter duration, so let‚Äôs work with plain seconds:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-11-06 01:59:59 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0800&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes sense:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We added 5 seconds to get to 02:00:04.&lt;/li&gt;
  &lt;li&gt;Since daylight saving ended at 2am, we roll the clock back by 1 hour.&lt;/li&gt;
  &lt;li&gt;We end up with 01:00:04, in GMT -8 instead of GMT -7.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Numbers don‚Äôt lie, but it seems like &lt;code&gt;ActiveSupport::Duration&lt;/code&gt; may be stretching the truth in this case.&lt;/p&gt;

&lt;p&gt;So why does &lt;code&gt;1.day&lt;/code&gt; behave so differently?&lt;/p&gt;

&lt;h2 id="down-the-rabbit-hole"&gt;
&lt;a href="#down-the-rabbit-hole"&gt;&lt;/a&gt;Down the rabbit hole&lt;/h2&gt;

&lt;p&gt;In order to explain the bug, we need some context on what happens when we add these two values together. Remember, since everything in Ruby is an object, an operation like &lt;code&gt;2 + 1&lt;/code&gt;  is really invoking the &lt;code&gt;+&lt;/code&gt; method on &lt;code&gt;2&lt;/code&gt;, and passing &lt;code&gt;1&lt;/code&gt; as an argument.&lt;/p&gt;

&lt;p&gt;ActiveSupport implements methods like &lt;code&gt;+&lt;/code&gt; on &lt;code&gt;Duration&lt;/code&gt; objects so that you can add two of them together:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That‚Äôs all fine and good when you have two &lt;code&gt;Duration&lt;/code&gt; objects, or at least when a &lt;code&gt;Duration&lt;/code&gt; object is the receiver (on the left-hand side of the operation). But we‚Äôve got a plain ol‚Äô Ruby class on the left:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2022-11-06 01:59:59 -0700"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we know the &lt;code&gt;+&lt;/code&gt; method is being invoked on our &lt;code&gt;Time&lt;/code&gt; object, yet somehow it knows what to do with an &lt;code&gt;ActiveSupport::Duration&lt;/code&gt;. How is that possible? Let‚Äôs introspect &lt;code&gt;+&lt;/code&gt; and see where it takes us:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="vg"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Method: Time#+(plus_with_duration)(other) /ruby/gems/2.7.0/gems/activesupport-5.2.8.1/lib/active_support/core_ext/time/calculations.rb:261&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# active_support/core_ext/time/calculations.rb:261&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hey, look! A monkey patch! üôà&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/rails/blob/8030cff808657faa44828de001cd3b80364597de/activesupport/lib/active_support/core_ext/time/calculations.rb#L261-L269"&gt;Let‚Äôs peek at that code&lt;/a&gt;:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus_with_duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#:nodoc:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Duration&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
    &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;since&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;plus_without_duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="kp"&gt;alias_method&lt;/span&gt; &lt;span class="ss"&gt;:plus_without_duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="kp"&gt;alias_method&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:plus_with_duration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, ActiveSupport has hooked into &lt;code&gt;+&lt;/code&gt; to customize the path taken if the value being added is a &lt;code&gt;Duration&lt;/code&gt; class. Otherwise, we can fall back on the original &lt;code&gt;+&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This is the point where I break out a debugger like &lt;a href="https://github.com/pry/pry"&gt;pry&lt;/a&gt; to step through the code and see where it takes me. After &lt;code&gt;step&lt;/code&gt;ping into &lt;code&gt;#since&lt;/code&gt; and following the code path, &lt;a href="https://github.com/rails/rails/blob/8030cff808657faa44828de001cd3b80364597de/activesupport/lib/active_support/core_ext/time/calculations.rb#L175"&gt;I end up here&lt;/a&gt;:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;time_advanced_by_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;year: &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;month: &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;day: &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, that‚Äôs interesting. Just looking at that method call, I can see that we‚Äôre dropping the hour, minute and second. And since I‚Äôm investigating a bug relating to an incorrect hour offset, this really piques my curiosity.&lt;/p&gt;

&lt;p&gt;Let‚Äôs step down &lt;a href="https://github.com/rails/rails/blob/8030cff808657faa44828de001cd3b80364597de/activesupport/lib/active_support/core_ext/time/calculations.rb#L120"&gt;one more level into &lt;code&gt;#change&lt;/code&gt;&lt;/a&gt;, which lives in another monkey-patch on the &lt;code&gt;Time&lt;/code&gt; class:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_year&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_month&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_day&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_hour&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_min&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:hour&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_sec&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:sec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:hour&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:min&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_offset&lt;/span&gt;
      &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_sec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;utc?&lt;/span&gt;
      &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt;
      &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_sec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utc_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;change&lt;/code&gt; is finally the method which returns a new &lt;code&gt;Time&lt;/code&gt; object based on the results of the operation. Ultimately, we‚Äôre calling some variant of &lt;code&gt;Time.new&lt;/code&gt;, providing all-new values for the year, month, etc.&lt;/p&gt;

&lt;p&gt;And where do we get all these new values?&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;new_hour&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we didn‚Äôt pass it in from the arguments, then we fall back &lt;em&gt;to the existing &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;sec&lt;/code&gt; value on the current &lt;code&gt;Time&lt;/code&gt; object.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In other words, given our initial &lt;code&gt;Time&lt;/code&gt; object of &lt;code&gt;Time.parse("2022-11-06 01:59:59 -0700")&lt;/code&gt;, we‚Äôre going to add &lt;code&gt;1.day&lt;/code&gt; to the date only, then pin &lt;code&gt;01:59:59&lt;/code&gt; on the end of it.&lt;/p&gt;

&lt;p&gt;And there‚Äôs our bug!&lt;/p&gt;

&lt;h2 id="the-end-or-is-it"&gt;
&lt;a href="#the-end-or-is-it"&gt;&lt;/a&gt;The end‚Ä¶ or is it?&lt;/h2&gt;

&lt;p&gt;Ultimately, the workaround on our side was a simple 5-character change: do our math with seconds instead of a &lt;code&gt;Duration&lt;/code&gt; object:&lt;/p&gt;

&lt;div class="language-ruby highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;started_at&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was also curious to see if others had run into it, and sure enough, &lt;a href="https://github.com/rails/rails/issues/45055"&gt;this bug had been reported a few months prior&lt;/a&gt;. It was &lt;a href="https://github.com/rails/rails/pull/46251"&gt;fixed shortly afterwards&lt;/a&gt; in edge Rails, although it does seem like there‚Äôs still some discrepancies when doing arithmetic around the DST boundary. My takeaway: when in doubt, stick with plain ol‚Äô seconds.&lt;/p&gt;

&lt;p&gt;I always have a hard ‚Ä¶ ahem, &lt;em&gt;time&lt;/em&gt; ‚Ä¶ wrapping my head around time-related bugs. This one was a fun opportunity to dive in and get to the bottom of a hairy problem.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content>
  </entry>
</feed>

